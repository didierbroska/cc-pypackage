{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Cookiecutter PyPackage template For full documentation about CookieCutter visit CookieCutter documentation . This modified template adds change about : switch from Travis CI to GiHub Actions for tests, build and deploy, switch from Sphinx to MkDocs for documentation, add support for Pyenv to manage Python version and virtualenv, adapt setup packaging in only setup.cfg file. Getting Started Readme Tutorial Basics Advanced Features","title":"Welcome"},{"location":"#welcome-to-cookiecutter-pypackage-template","text":"For full documentation about CookieCutter visit CookieCutter documentation . This modified template adds change about : switch from Travis CI to GiHub Actions for tests, build and deploy, switch from Sphinx to MkDocs for documentation, add support for Pyenv to manage Python version and virtualenv, adapt setup packaging in only setup.cfg file.","title":"Welcome to Cookiecutter PyPackage template"},{"location":"#getting-started","text":"Readme Tutorial","title":"Getting Started"},{"location":"#basics","text":"","title":"Basics"},{"location":"#advanced-features","text":"","title":"Advanced Features"},{"location":"license/","text":"../LICENSE","title":"License"},{"location":"getting-started/","text":"Template cookiecutter - Python Package This template build from original Cookiecutter template for a Python package. GitHub repo: https://github.com/didierbroska/cc-pypackage/ Documentation: TODO: GH Pages Free software: MIT License Features Testing setup with unittest and python setup.py test or pytest GitHub Actions : Ready for GiHub Actions Continuous Integration testing PyTest : testing: Ready to test code. Pytest-cov & Coverage : testing: Ready to test code with coverage (optional) Tox testing: Setup to easily test for Python 3.5, 3.6, 3.7, 3.8 MkDocs docs: Documentation ready for generation with. bump2version : Pre-configured version bumping with a single command Auto-release to PyPI when you push a new tag to master or PyPI testing deploy with specific branch named test-deploy . Command line interface using Click (optional) Quickstart Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher): pip install -U cookiecutter Generate a Python package project: cookiecutter gh:didierbroska/cc-pypackage Then: Create a repo and put it there. Install the dev requirements into a virtualenv. ( make install ) Register your project with PyPI. Run the GitHub Actions build when you push in master and deploy in PyPI when you push new tag in master . Add the documention in GitHub Pages when push to master . Release your package by pushing a new tag to master . Add a package dependencies in setup.cfg file that specifies the packages you will need for your project and their versions. For more info see the setuptools documentation about setup.cfg only project . Activate your project on pyup.io (optionnal). For more details, see the cc-pypackage tutorial TODO : update like when doc is ok .","title":"Introduction"},{"location":"getting-started/#template-cookiecutter-python-package","text":"This template build from original Cookiecutter template for a Python package. GitHub repo: https://github.com/didierbroska/cc-pypackage/ Documentation: TODO: GH Pages Free software: MIT License","title":"Template cookiecutter - Python Package"},{"location":"getting-started/#features","text":"Testing setup with unittest and python setup.py test or pytest GitHub Actions : Ready for GiHub Actions Continuous Integration testing PyTest : testing: Ready to test code. Pytest-cov & Coverage : testing: Ready to test code with coverage (optional) Tox testing: Setup to easily test for Python 3.5, 3.6, 3.7, 3.8 MkDocs docs: Documentation ready for generation with. bump2version : Pre-configured version bumping with a single command Auto-release to PyPI when you push a new tag to master or PyPI testing deploy with specific branch named test-deploy . Command line interface using Click (optional)","title":"Features"},{"location":"getting-started/#quickstart","text":"Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher): pip install -U cookiecutter Generate a Python package project: cookiecutter gh:didierbroska/cc-pypackage Then: Create a repo and put it there. Install the dev requirements into a virtualenv. ( make install ) Register your project with PyPI. Run the GitHub Actions build when you push in master and deploy in PyPI when you push new tag in master . Add the documention in GitHub Pages when push to master . Release your package by pushing a new tag to master . Add a package dependencies in setup.cfg file that specifies the packages you will need for your project and their versions. For more info see the setuptools documentation about setup.cfg only project . Activate your project on pyup.io (optionnal). For more details, see the cc-pypackage tutorial TODO : update like when doc is ok .","title":"Quickstart"},{"location":"getting-started/TUTORIAL/","text":"Tutorial To start with, you will need a GitHub Account and un account on PyPI . Create these before you get started on this tutorial. It's possible to test deployement with PyPI Test Step 1: Install Cookiecutter First, you need to create and activate a virtualenv for the package project. Use your favorite method, or create a pyenv-virtualenv for your new package like this: pyenv vitualenv <python-version> <my-project> Here <your-env> is the name of the package that you'll create. Or you can use another name, if you want. Activate your environment: pyenv activate <my-project> Install cookiecutter: pip install cookiecutter Step 2: Generate Your Package Use cookiecutter , pointing it at the cc-pypackage repo: cookiecutter gh:didierbroska/cc-pypackage You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults. Step 3: Create a GitHub Repo Enter in your new folder project named by cookiecutter , and create a git base, tracked all files et make your first commit and push to create a new repo. This is so that GitHub Actions and pyup.io can find it when we get to Step 5 and Step 7. cd <my-project> git init git add . git commit -m \"Initial commit\" git remote add origin git@github.com:<your-gh-account-name>/<your-project>.git git push -u origin master To create a repository, you'll need a ssh key to push the repo. you can generate a key and/or add an existing one. Step 4: Install Dev Requirement Your virtualenv should still be activated. If it isn't, activate it now. Install the new project's local developpement requirements: For pyenv user Pyenv allows to create a local environnment which loading when you enter on the folder. pyenv local <my-project> <version-python-1> <version-python-N> <version-python> permits to handle test others version with tox. You'll see it at the TODO . You should still b in the folder containing the setup.cfg file. make develop # or you don't use make pip install -e '.[dev]' Step 5: Set Up GitHub Actions GitHub Actions is a continous integration tool integrated at GiHub used to prevent intregration problems. Every commit to the master branch will trigger automated builds of the application. Before running Actions , you must be create a Secret with your token from your PyPI account. If you want trying deployement you can use PyPI Test before. Step 6: Set Up Mkdocs / GitHub Pages In this template, the documents generator is MkDocs","title":"Tutorial"},{"location":"getting-started/TUTORIAL/#tutorial","text":"To start with, you will need a GitHub Account and un account on PyPI . Create these before you get started on this tutorial. It's possible to test deployement with PyPI Test","title":"Tutorial"},{"location":"getting-started/TUTORIAL/#step-1-install-cookiecutter","text":"First, you need to create and activate a virtualenv for the package project. Use your favorite method, or create a pyenv-virtualenv for your new package like this: pyenv vitualenv <python-version> <my-project> Here <your-env> is the name of the package that you'll create. Or you can use another name, if you want. Activate your environment: pyenv activate <my-project> Install cookiecutter: pip install cookiecutter","title":"Step 1: Install Cookiecutter"},{"location":"getting-started/TUTORIAL/#step-2-generate-your-package","text":"Use cookiecutter , pointing it at the cc-pypackage repo: cookiecutter gh:didierbroska/cc-pypackage You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults.","title":"Step 2: Generate Your Package"},{"location":"getting-started/TUTORIAL/#step-3-create-a-github-repo","text":"Enter in your new folder project named by cookiecutter , and create a git base, tracked all files et make your first commit and push to create a new repo. This is so that GitHub Actions and pyup.io can find it when we get to Step 5 and Step 7. cd <my-project> git init git add . git commit -m \"Initial commit\" git remote add origin git@github.com:<your-gh-account-name>/<your-project>.git git push -u origin master To create a repository, you'll need a ssh key to push the repo. you can generate a key and/or add an existing one.","title":"Step 3: Create a GitHub Repo"},{"location":"getting-started/TUTORIAL/#step-4-install-dev-requirement","text":"Your virtualenv should still be activated. If it isn't, activate it now. Install the new project's local developpement requirements: For pyenv user Pyenv allows to create a local environnment which loading when you enter on the folder. pyenv local <my-project> <version-python-1> <version-python-N> <version-python> permits to handle test others version with tox. You'll see it at the TODO . You should still b in the folder containing the setup.cfg file. make develop # or you don't use make pip install -e '.[dev]'","title":"Step 4: Install Dev Requirement"},{"location":"getting-started/TUTORIAL/#step-5-set-up-github-actions","text":"GitHub Actions is a continous integration tool integrated at GiHub used to prevent intregration problems. Every commit to the master branch will trigger automated builds of the application. Before running Actions , you must be create a Secret with your token from your PyPI account. If you want trying deployement you can use PyPI Test before.","title":"Step 5: Set Up GitHub Actions"},{"location":"getting-started/TUTORIAL/#step-6-set-up-mkdocs-github-pages","text":"In this template, the documents generator is MkDocs","title":"Step 6: Set Up Mkdocs / GitHub Pages"}]}